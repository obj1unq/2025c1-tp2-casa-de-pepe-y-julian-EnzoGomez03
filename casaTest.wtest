import cuentas.*
import cosas.*
import casa.*

describe "casa De Pepe Y Julian" {
  test "Compras para la casa de Pepe Y Julian" {

    casaDePepeYJulian.comprar(heladera)
    casaDePepeYJulian.comprar(cama)
    casaDePepeYJulian.comprar(plancha)
    assert.equals([heladera,cama,plancha], casaDePepeYJulian.cosas())

//- cantidad de cosas compradas es 3
    assert.equals(3, casaDePepeYJulian.cantCosasCompradas())
//- tiene algún electrodoméstico
    assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
//- tiene algún mueble
    assert.that(casaDePepeYJulian.tieneAlgun(mueble))
//- no tiene alguna comida
    assert.notThat(casaDePepeYJulian.tieneAlgun(comida))
//- Si le preguntan si viene de comprar un electrodoméstico dice que sí, pero si le preguntan si viene de comprar un mueble dice que no
    assert.that(casaDePepeYJulian.vieneDeComprar(electrodomestico))
    assert.notThat(casaDePepeYJulian.vieneDeComprar(mueble))
//- Es derrochona (ya que gastó 29200)
    assert.that(casaDePepeYJulian.esDerrochona())
//- no hay comida comprada
    assert.notThat(casaDePepeYJulian.tieneAlgun(comida))
//- no es una mala época
    assert.notThat(casaDePepeYJulian.malaEpoca())

//- falta comida
    assert.that(casaDePepeYJulian.faltaComida())
//- las categorías compradas son electrodoméstico y mueble
  }

  test "Los electrodomesticos comprados son la heladera y la plancha" {
    //- los electrodomésticos compramos son la heladera y la plancha
    casaDePepeYJulian.comprar(heladera)
    casaDePepeYJulian.comprar(plancha)
    assert.equals([heladera,plancha], casaDePepeYJulian.cosas())
  }

  test "Los muebles comprados son : cama y nada mas" {
    //- los muebles comprados son: la cama y nada más
    casaDePepeYJulian.comprar(cama)
    assert.equals([cama], casaDePepeYJulian.cosas())
  }

  test "Es una mala epoca"{
    casaDePepeYJulian.comprar(tiraDeAsado)
    casaDePepeYJulian.comprar(paqueteDeFideos)
    //casaDePepeYJulian.comprar(cama) con esto falla, porque entonces NO seria mala epoca.
    assert.that(casaDePepeYJulian.malaEpoca())
  }

  test "Falta comprar una tira de asado, y el paquete de fideos" {
    //- si le preguntamos que falta comprar de una tira de asado, una plancha y un paquete de fideos debe contestar que falta la tira de asado y el paquete de fideos.
    casaDePepeYJulian.comprar(plancha)
    assert.equals([tiraDeAsado,paqueteDeFideos], casaDePepeYJulian.queFaltaComprar([tiraDeAsado,plancha,paqueteDeFideos]))
  }

  test "No falta comida" {
    casaDePepeYJulian.comprar(paqueteDeFideos)
    casaDePepeYJulian.comprar(tiraDeAsado)
    assert.notThat(casaDePepeYJulian.faltaComida())
  }

  test "Todo lo comprado son electrodomesticos, y muebles" {
    casaDePepeYJulian.comprar(plancha)
    casaDePepeYJulian.comprar(cama)
    assert.equals([electrodomestico,mueble], casaDePepeYJulian.categoriasCompradas())
    //- las categorías compradas son electrodoméstico y mueble
  }


  test "Compraron electrodomesticos, muebles y comida" {
    casaDePepeYJulian.comprar(plancha)
    casaDePepeYJulian.comprar(cama)
    casaDePepeYJulian.comprar(tiraDeAsado)
    assert.equals([electrodomestico,mueble,comida], casaDePepeYJulian.categoriasCompradas())
    
  }
}

describe "cuentas Bancarias" {
  test "Cuenta corriente" {
    //**Caso de Prueba**: si la cuenta tiene 20 de saldo, si se deposita 1000 pesos, el saldo queda en 1020 pesos, si luego se extre 50 queda en 970 pesos. Si se intenta extraer 2000 debería lanzar error ya que no se puede cumplir la responsabilidad.
  
    cuentaCorriente.saldo(20)
    cuentaCorriente.depositar(1000)
    assert.equals(1020, cuentaCorriente.saldo())
    cuentaCorriente.extraer(50)
    assert.equals(970, cuentaCorriente.saldo())
    assert.throwsException({ cuentaCorriente.extraer(2000) })
  }

  test "Cuenta con gastos" {
    //**Caso de Prueba**: para una cuenta con un saldo de 500 pesos y 20 pesos de costo por operación, si se deposita 1000 pesos, el saldo queda en 1480 pesos. Si luego se extrae 30, queda en 1450. Después se eso se intenta depositar 2000, pero no se puede porque violaría la regla de negocio, por lo que hay que verificar que se lance el error y que el saldo siga siendo de 1450. Finalmente se extren 2000 pesos dejando el saldo en -550.
    cuentaConGastos.saldo(500)
    assert.equals(500, cuentaConGastos.saldo())
    cuentaConGastos.costoOperacion(20)
    cuentaConGastos.depositar(1000)
    assert.equals(1480, cuentaConGastos.saldo())
    cuentaConGastos.extraer(30)
    assert.equals(1450, cuentaConGastos.saldo())
    assert.throwsException({ cuentaConGastos.depositar(2000) })
    cuentaConGastos.extraer(2000)
    assert.equals(-550, cuentaConGastos.saldo())
  }
}

describe "Comprando con las cuentas" {
  test "Compra usando alguna cuenta bancaria de la casa" {
    //Ejemplo: Si la casa tiene configurada una cuenta corriente con saldo 1000, se compra una tira de asado y un paquete de fideos, entonces la cuenta corriente queda con saldo 600.

    cuentaCorriente.saldo(1000)
    assert.equals(1000, cuentaCorriente.saldo())
    casaDePepeYJulian.comprar(tiraDeAsado)
    casaDePepeYJulian.comprar(paqueteDeFideos)
    casaDePepeYJulian.extraer(cuentaCorriente, tiraDeAsado)
    casaDePepeYJulian.extraer(cuentaCorriente, paqueteDeFideos)
    assert.equals(600, cuentaCorriente.saldo())
  }
}